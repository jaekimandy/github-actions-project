name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  release:
    types: [published, created]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  HELM_VERSION: "3.12.0"
  TERRAFORM_VERSION: "1.5.0"

# Enterprise CI/CD Pipeline with advanced DevOps practices

jobs:
  # Security and Compliance Checks
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    outputs:
      scan-results: ${{ steps.scan.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.8.0
        if: inputs.environment == 'production'
        with:
          target: "https://staging.example.com" # Replace with your staging URL

      - name: Run Snyk security scan
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  # Code Quality and Testing
  quality-gates:
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ "${{ matrix.python-version }}" = "3.9" ]; then
            pip install -r requirements-py39.txt
          elif [ "${{ matrix.python-version }}" = "3.10" ]; then
            pip install -r requirements-py310.txt
          elif [ "${{ matrix.python-version }}" = "3.11" ]; then
            pip install -r requirements-py311.txt
          fi
          pip install -r requirements-dev.txt
          pip install safety bandit black isort mypy

      - name: Run safety check
        run: safety scan --output json --save-as json safety-report.json

      - name: Run bandit security linter
        run: bandit -r src/ -f json -o bandit-report.json

      - name: Run code formatting check
        run: |
          black --check --diff src/
          isort --check-only --diff src/

      - name: Run type checking
        run: mypy src/

      - name: Run tests with coverage
        run: |

          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-enterprise

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            safety-report.json
            bandit-report.json

  # Infrastructure as Code Validation
  infrastructure-validation:
    runs-on: ubuntu-latest
    needs: quality-gates
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Terraform Format Check
        run: |
          cd infrastructure/production
          terraform fmt -check -recursive
          terraform init -backend=false
          terraform validate

      - name: Terraform Plan
        run: |
          cd infrastructure/production
          terraform plan -detailed-exitcode -out=tfplan
        continue-on-error: true

      - name: Helm Lint
        run: |
          helm lint k8s/production/
          helm template devops-demo k8s/production/ --values k8s/production/values.yaml

      - name: Upload Terraform plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infrastructure/production/tfplan

  # Container Build and Security
  container-build:
    runs-on: ubuntu-latest
    needs: infrastructure-validation
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.source={{repo}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.version={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-image-results.sarif"

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-image-results.sarif"

  # Deployment to Development Environment
  deploy-development:
    runs-on: ubuntu-latest
    needs: container-build
    environment: development
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Configure kubectl for development cluster
        run: |
          echo "${{ secrets.DEV_KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to development
        run: |
          kubectl apply -f k8s/development/
          kubectl set image deployment/devops-demo-app app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n development
          kubectl rollout status deployment/devops-demo-app -n development --timeout=300s

      - name: Run integration tests
        run: |
          # Wait for deployment to be ready
          kubectl wait --for=condition=ready pod -l app=devops-demo -n development --timeout=300s
          # Run integration tests against the deployed application
          curl -f http://devops-demo-service.development.svc.cluster.local:8000/health

  # Deployment to Staging Environment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [container-build, deploy-development]
    environment: staging
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Configure kubectl for staging cluster
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to staging
        run: |
          kubectl apply -f k8s/staging/
          kubectl set image deployment/devops-demo-app app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n staging
          kubectl rollout status deployment/devops-demo-app -n staging --timeout=300s

      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app=devops-demo -n staging --timeout=300s
          # Run comprehensive smoke tests
          ./scripts/smoke-tests.sh staging

  # Production Deployment (Manual Approval Required)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [container-build, deploy-staging]
    environment: production
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Configure kubectl for production cluster
        run: |
          echo "${{ secrets.PROD_KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to production
        run: |
          kubectl apply -f k8s/production/
          kubectl set image deployment/devops-demo-app app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n production
          kubectl rollout status deployment/devops-demo-app -n production --timeout=300s

      - name: Verify production deployment
        run: |
          kubectl wait --for=condition=ready pod -l app=devops-demo -n production --timeout=300s
          # Run production verification tests
          ./scripts/production-verification.sh

      - name: Notify deployment success
        if: success()
        run: |
          echo "🚀 Production deployment successful!"
          echo "📊 Monitor at: https://grafana.example.com"
          echo "📝 Logs at: https://logs.example.com"

  # Post-deployment Monitoring
  monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup monitoring tools
        run: |
          # Install monitoring CLI tools
          curl -L https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz | tar xz
          ./prometheus-2.45.0.linux-amd64/promtool check rules monitoring/rules/

      - name: Verify monitoring setup
        run: |
          # Check if metrics are being collected
          curl -f http://prometheus.example.com/api/v1/query?query=up
          # Verify alerting rules
          ./scripts/verify-alerts.sh

  # Final Status Report
  status-report:
    runs-on: ubuntu-latest
    needs:
      [
        security-scan,
        quality-gates,
        infrastructure-validation,
        container-build,
        deploy-development,
        deploy-staging,
        deploy-production,
        monitoring,
      ]
    if: always()
    steps:
      - name: Generate deployment report
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} | ${{ needs.security-scan.outputs.duration }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gates | ${{ needs.quality-gates.result }} | ${{ needs.quality-gates.outputs.duration }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure | ${{ needs.infrastructure-validation.result }} | ${{ needs.infrastructure-validation.outputs.duration }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Build | ${{ needs.container-build.result }} | ${{ needs.container-build.outputs.duration }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Development | ${{ needs.deploy-development.result }} | ${{ needs.deploy-development.outputs.duration }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Staging | ${{ needs.deploy-staging.result }} | ${{ needs.deploy-staging.outputs.duration }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production | ${{ needs.deploy-production.result }} | ${{ needs.deploy-production.outputs.duration }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Monitoring | ${{ needs.monitoring.result }} | ${{ needs.monitoring.outputs.duration }} |" >> $GITHUB_STEP_SUMMARY

      - name: Send notifications
        if: always()
        run: |
          # Send Slack/Teams notifications based on deployment status
          ./scripts/notify-deployment.sh ${{ needs.deploy-production.result }}
