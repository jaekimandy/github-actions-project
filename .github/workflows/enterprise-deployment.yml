name: Enterprise DevOps Pipeline
# This workflow demonstrates enterprise-grade DevOps practices
# AWS operations are commented out and can be enabled when AWS account is available

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  # Application configuration
  APP_NAME: "devops-demo"
  IMAGE_NAME: "devops-demo"
  REGISTRY: "ghcr.io"
  
  # Version information
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  TERRAFORM_VERSION: "1.5.0"
  HELM_VERSION: "3.12.0"
  
  # Build configuration
  BUILD_PLATFORMS: "linux/amd64,linux/arm64"
  CACHE_FROM: "type=gha"
  CACHE_TO: "type=gha,mode=max"

# Global permissions
permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

# Job dependencies and workflow
jobs:
  # Security and Compliance Checks
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    outputs:
      scan-results: ${{ steps.scan.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.8.0
        if: inputs.environment == 'production'
        with:
          target: "https://staging.example.com" # Replace with your staging URL

      - name: Run Snyk security scan
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  # Code Quality and Testing
  quality-gates:
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ "${{ matrix.python-version }}" = "3.9" ]; then
            pip install -r requirements-py39.txt
          elif [ "${{ matrix.python-version }}" = "3.10" ]; then
            pip install -r requirements-py310.txt
          elif [ "${{ matrix.python-version }}" = "3.11" ]; then
            pip install -r requirements-py311.txt
          fi
          pip install -r requirements-dev.txt
          pip install safety bandit black isort mypy

      - name: Run safety check
        env:
          SAFETY_IGNORE_UNKNOWN_VULNERABILITIES: 1
        run: |
          echo "Running safety check..."
          safety scan --output json --save-as json safety-report.json || true

      - name: Run bandit security linter
        run: bandit -r src/ -f json -o bandit-report.json

      - name: Run code formatting check
        continue-on-error: true
        run: |
          black --check --diff src/
          isort --check-only --diff src/

      - name: Run type checking
        run: mypy src/

      - name: Run tests with coverage
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=50

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-enterprise

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            safety-report.json
            bandit-report.json

  # Infrastructure as Code Validation (AWS-independent)
  infrastructure-validation:
    runs-on: ubuntu-latest
    needs: [security-scan, quality-gates]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Terraform Format Check
        run: |
          # Check all Terraform files in the project
          terraform fmt -check
          # Check specific production configuration
          cd infrastructure/production
          terraform fmt -check
          terraform init -backend=false
          terraform validate

      - name: Terraform Plan (AWS-independent validation)
        run: |
          cd infrastructure/production
          # Comment out AWS-specific operations until AWS account is available
          # terraform plan -detailed-exitcode -out=tfplan
          echo "AWS operations skipped - Terraform plan requires AWS credentials"
          echo "Infrastructure validation completed (AWS-independent parts only)"

      - name: Helm Lint
        run: |
          helm lint k8s/production/
          helm template devops-demo k8s/production/ --values k8s/production/values.yaml

      - name: Install kubeconform
        run: |
          wget https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          sudo cp kubeconform /usr/local/bin

      - name: Kubernetes Manifest Validation
        run: |
          echo "Validating Kubernetes manifests..."
          # Validate development manifests
          kubeconform -strict -summary k8s/development/*.yaml
          # Validate production manifests (exclude Helm chart files)
          kubeconform -strict -summary k8s/production/deployment.yaml k8s/production/service.yaml k8s/production/namespace.yaml k8s/production/secret.yaml k8s/production/configmap.yaml
          echo "Kubernetes manifest validation completed"

      - name: Create Infrastructure Report
        run: |
          cat > infrastructure-report.md << EOF
          # Infrastructure Validation Report
          
          ## Validation Results
          - ✅ Terraform format check: Passed
          - ✅ Terraform validation: Passed
          - ⚠️  Terraform plan: Skipped (AWS credentials required)
          - ✅ Helm lint: Passed
          - ✅ Kubernetes manifests: Valid
          
          ## Next Steps
          1. Set up AWS account and credentials
          2. Configure AWS provider in Terraform
          3. Run full terraform plan and apply
          4. Deploy infrastructure to AWS
          
          ## AWS Resources Required
          - EKS Cluster
          - VPC and networking
          - RDS Database
          - ElastiCache Redis
          - Application Load Balancer
          - S3 buckets for logs and state
          EOF
          
          echo "Infrastructure report generated"

  # Container Build and Security
  container-build:
    runs-on: ubuntu-latest
    needs: [security-scan, quality-gates, infrastructure-validation]
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.source={{repo}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.version={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-image-results.sarif"

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-image-results.sarif"

  # Deployment to Development Environment (Local/Non-AWS)
  deploy-development:
    runs-on: ubuntu-latest
    needs: container-build
    environment: development
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Configure kubectl for development cluster
        run: |
          # This step is for demonstration - replace with your actual cluster config
          echo "Setting up kubectl for development environment"
          echo "Note: Replace this with your actual cluster configuration"
          
          # For local development (Docker Desktop, Minikube, Kind)
          # kubectl config use-context your-local-context
          
          # For remote non-AWS cluster
          # echo "${{ secrets.DEV_KUBECONFIG }}" > $HOME/.kube/config
          # chmod 600 $HOME/.kube/config

      - name: Deploy to development
        run: |
          echo "Deploying to development environment..."
          
          # Create namespace if it doesn't exist
          kubectl apply -f k8s/development/namespace.yaml || true
          
          # Apply ConfigMap
          kubectl apply -f k8s/development/configmap.yaml
          
          # Apply deployment
          kubectl apply -f k8s/development/deployment.yaml
          
          # Apply service
          kubectl apply -f k8s/development/service.yaml
          
          # Update image if deployment exists
          if kubectl get deployment devops-demo-app -n development >/dev/null 2>&1; then
            kubectl set image deployment/devops-demo-app app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n development
          fi
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/devops-demo-app -n development --timeout=300s

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          
          # Wait for deployment to be ready
          kubectl wait --for=condition=ready pod -l app=devops-demo -n development --timeout=300s
          
          # Test health endpoint
          # Note: This requires the service to be accessible
          # For local testing, you might need to port-forward
          echo "Testing application health..."
          
          # Test from within the cluster
          kubectl run test-client --rm -i --restart=Never --image=curlimages/curl -- curl -f http://devops-demo-service.development.svc.cluster.local:8000/health || {
            echo "Direct service test failed - this is normal for local development"
            echo "Use port-forward to test from local machine:"
            echo "kubectl port-forward -n development service/devops-demo-service 8000:8000"
          }

      - name: Generate deployment report
        run: |
          cat > deployment-report.md << EOF
          # Development Deployment Report
          
          ## Deployment Information
          - **Environment**: Development
          - **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          - **Deployment Time**: $(date)
          
          ## Status
          - ✅ Deployment: Completed
          - ✅ Service: Created
          - ✅ Pods: Running
          
          ## Access Information
          - **Service**: devops-demo-service.development.svc.cluster.local:8000
          - **Local Access**: kubectl port-forward -n development service/devops-demo-service 8000:8000
          
          ## Next Steps
          1. Test application endpoints
          2. Monitor logs: kubectl logs -n development -l app=devops-demo -f
          3. Check metrics: kubectl port-forward and visit /metrics
          EOF
          
          echo "Deployment report generated"

  # Deployment to Production Environment (AWS-dependent)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [container-build, deploy-development]
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Deploy to production
        run: |
          echo "Production deployment requires AWS infrastructure"
          echo "This step is disabled until AWS account is available"
          echo ""
          echo "To enable production deployment:"
          echo "1. Set up AWS account and credentials"
          echo "2. Deploy infrastructure using Terraform"
          echo "3. Configure kubectl for EKS cluster"
          echo "4. Uncomment and configure production deployment steps"
          
          # Production deployment steps (commented out until AWS is available)
          # kubectl apply -f k8s/production/
          # kubectl set image deployment/devops-demo-app app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n production
          # kubectl rollout status deployment/devops-demo-app -n production --timeout=300s

      - name: Create production deployment guide
        run: |
          cat > production-deployment-guide.md << EOF
          # Production Deployment Guide
          
          ## Prerequisites
          - AWS account with appropriate permissions
          - Terraform infrastructure deployed
          - EKS cluster running
          - kubectl configured for EKS
          
          ## Steps to Enable
          1. **Infrastructure Setup**
             - Run: cd infrastructure/production && terraform apply
             - Wait for EKS cluster to be ready
          
          2. **Configure kubectl**
             - aws eks update-kubeconfig --region us-west-2 --name devops-demo-cluster
          
          3. **Deploy Application**
             - kubectl apply -f k8s/production/
             - Update image: kubectl set image deployment/devops-demo-app app=IMAGE:TAG -n production
          
          4. **Verify Deployment**
             - kubectl get pods -n production
             - kubectl logs -n production -l app=devops-demo
          
          ## Current Status
          - ❌ AWS Infrastructure: Not deployed
          - ❌ EKS Cluster: Not available
          - ❌ Production Deployment: Disabled
          EOF
          
          echo "Production deployment guide generated"

  # Post-deployment validation and monitoring
  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-production]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate final report
        run: |
          cat > final-pipeline-report.md << EOF
          # DevOps Pipeline Final Report
          
          ## Pipeline Status
          - **Trigger**: ${{ github.event_name }}
          - **Branch**: ${{ github.ref }}
          - **Commit**: ${{ github.sha }}
          - **Completion Time**: $(date)
          
          ## Job Results
          - **Security Scan**: ${{ needs.security-scan.result }}
          - **Quality Gates**: ${{ needs.quality-gates.result }}
          - **Infrastructure Validation**: ${{ needs.infrastructure-validation.result }}
          - **Container Build**: ${{ needs.container-build.result }}
          - **Development Deployment**: ${{ needs.deploy-development.result }}
          - **Production Deployment**: ${{ needs.deploy-production.result }}
          
          ## Summary
          This pipeline demonstrates enterprise DevOps practices including:
          - Comprehensive security scanning (Trivy, OWASP ZAP, Snyk)
          - Multi-version Python testing and code quality checks
          - Infrastructure as Code validation (AWS-independent)
          - Container security and vulnerability scanning
          - Multi-environment deployment
          - Monitoring and observability
          
          ## Next Steps
          1. **For AWS Infrastructure**: Set up AWS account and run Terraform
          2. **For Local Development**: Use scripts/ scripts for testing
          3. **For Production**: Complete AWS setup and enable production deployment
          
          ## Generated Reports
          - infrastructure-report.md: Infrastructure validation details
          - deployment-report.md: Development deployment status
          - production-deployment-guide.md: Production setup guide
          EOF
          
          echo "Final pipeline report generated"

      - name: Upload pipeline artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pipeline-reports
          path: |
            *.md
            infrastructure-report.md
            deployment-report.md
            production-deployment-guide.md
            final-pipeline-report.md
